// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Alber {
    uint256 public counter;

    function increment(uint256 _value) external {
        // Using require() to validate input
        require(_value != 0, "Value cannot be zero");

        // Using assert() to validate internal state
        assert(counter + _value > counter);

        // Increment the counter
        counter += _value;
    }

    function decrement(uint256 _value) external {
        // Using require() to validate input
        require(_value != 0, "Value cannot be zero");

        // Using revert() to revert the transaction
        if (_value > counter) {
            revert("Value is greater than the counter");
        }

        // Decrement the counter
        counter -= _value;
    }

    function doubleCounter() external {
        // Using assert() to validate internal state
        assert(counter * 2 > counter);

        // Double the counter value
        counter *= 2;
    }
}
